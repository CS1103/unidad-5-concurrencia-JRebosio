#include <chrono>
#include <iostream>
#include <mutex>
#include <numeric>
#include <random>
#include <vector>
 
constexpr int size= 100;
std::mutex myMutex;
float add;
void sum(const int &i){
	std::lock_guard<std::mutex> myLockGuard(myMutex);
	add+= i;
}
 
int main(){
 
  std::cout << std::endl;
 
  std::vector<int> randValues;
  randValues.reserve(size);
 
  std::random_device seed;
  std::mt19937 engine(seed());
  std::uniform_int_distribution<> uniformDist(1,10);
  for ( long long i=0 ; i< size ; ++i) randValues.emplace_back(uniformDist(engine));
 
  for (auto i: randValues){
      sum(i);
  }
 
  std::cout << "Result: " << add << std::endl;
 
  std::cout << std::endl;
 
}